"@cloudant/cloudant": "^2.3.0",
    "express-async-handler": "^1.1.4",
    "nodemon": "^1.18.4"
    




const asyncHandler = require('express-async-handler')

const fs = require('fs');
const dbCredentials = {
    dbName: 'testdb'
}

let cloudant = require('@cloudant/cloudant');
let db;

function getDBCredentialsUrl(jsonData) {
    var vcapServices = JSON.parse(jsonData);
    for (var vcapService in vcapServices) {
        if (vcapService.match(/cloudant/i)) {
            return vcapServices[vcapService][0].credentials.url;
        }
    }
}

function initDBConnection() {

    if (process.env.VCAP_SERVICES) {
        dbCredentials.url = getDBCredentialsUrl(process.env.VCAP_SERVICES);
    } else { //When running locally, the VCAP_SERVICES will not be set
        dbCredentials.url = getDBCredentialsUrl(fs.readFileSync("vcap-local.json", "utf-8"));
    }

    cloudant = cloudant({ url: dbCredentials.url, plugins: 'promises' });

    // check if DB exists if not create
    cloudant.db.create(dbCredentials.dbName, function (err, res) {
        if (err) {
            console.log('Could not create new db: ' + dbCredentials.dbName + ', it might already exist.');
        }
    });

    db = cloudant.use(dbCredentials.dbName);
}

initDBConnection();

db.list({include_docs:true}) 
db.insert(data,id)
db.get(id, options)





app.get('/cloudant', asyncHandler(async (request, res) => {
    let list = await db.list({ include_docs: true })
    res.send(list);
}));

app.post('/db/new', asyncHandler(async (request, res) => {
    const newDoc = {
        title: request.body.title,
        url: request.body.url
    }
    let responseDB = await db.insert(newDoc, null);
    res.send(`${JSON.stringify(responseDB)} \n`);
}))




    <% docs.rows.forEach( (item)=>{ %>
    <%= item.doc.title %>
    <br>
    <%= item.doc.url %>
    <br><br>
    <% }); %>
